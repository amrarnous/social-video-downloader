services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: video-downloader-app
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    volumes:
      - downloads:/app/downloads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - video-downloader-network

  # Development service (alternative to production)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: video-downloader-dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
    volumes:
      - .:/app
      - /app/node_modules
      - downloads:/app/downloads
    command: npm run start:dev
    restart: unless-stopped
    networks:
      - video-downloader-network
    profiles:
      - dev

  # Redis for caching (optional enhancement)
  redis:
    image: redis:7-alpine
    container_name: video-downloader-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - video-downloader-network
    profiles:
      - cache

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: video-downloader-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - video-downloader-network
    profiles:
      - proxy

volumes:
  downloads:
    driver: local
  redis-data:
    driver: local

networks:
  video-downloader-network:
    driver: bridge
